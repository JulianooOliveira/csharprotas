// <auto-generated />
using System;
using Context.Modelo;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace rotasbackend.Migrations
{
    [DbContext(typeof(SistemaSaudeContext))]
    [Migration("20250613153404_ChangeEspecialidades")]
    partial class ChangeEspecialidades
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("ApiEspecialidade.Models.Especialidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("IdMedico")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NivelComplexidade")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NomeEspecialidade")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IdMedico");

                    b.ToTable("Especialidades");
                });

            modelBuilder.Entity("ApiMedico.Models.Medico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CRMUf")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CrmMedico")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DataNascimentoMedico")
                        .HasColumnType("TEXT");

                    b.Property<string>("EspecialidadePrincipal")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NomeMedico")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TelefoneProfissional")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ValorConsulta")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Medicos");
                });

            modelBuilder.Entity("ApiPaciente.Models.Paciente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DocumentoCPF")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("EspecialidadeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdEspecialidade")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdMedico")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MedicoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nascimento")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NomeCompleto")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ValorConsulta")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EspecialidadeId");

                    b.HasIndex("MedicoId");

                    b.ToTable("Pacientes");
                });

            modelBuilder.Entity("ApiEspecialidade.Models.Especialidade", b =>
                {
                    b.HasOne("ApiMedico.Models.Medico", "Medico")
                        .WithMany("Especialidades")
                        .HasForeignKey("IdMedico")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Medico");
                });

            modelBuilder.Entity("ApiPaciente.Models.Paciente", b =>
                {
                    b.HasOne("ApiEspecialidade.Models.Especialidade", "Especialidade")
                        .WithMany()
                        .HasForeignKey("EspecialidadeId");

                    b.HasOne("ApiMedico.Models.Medico", "Medico")
                        .WithMany()
                        .HasForeignKey("MedicoId");

                    b.Navigation("Especialidade");

                    b.Navigation("Medico");
                });

            modelBuilder.Entity("ApiMedico.Models.Medico", b =>
                {
                    b.Navigation("Especialidades");
                });
#pragma warning restore 612, 618
        }
    }
}
